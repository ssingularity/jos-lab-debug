1.What is the purpose of having an individual handler function for each exception/interrupt? 
(i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists 
in the current implementation could not be provided?)
因为有的处理器不会push错误号，所以需要独立而不同的处理函数去区分错误类型，如果都使用同一个处理函数
的话则可能无法区分错误类型

2.Did you have to do anything to make the user/softint program behave correctly? The grade 
script expects it to produce a general protection fault (trap 13), but softint's code says int $14. 
Why should this produce interrupt vector 13? What happens if the kernel actually allows softint's 
int $14 instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?
因为有权限控制，对于用户代码而言，用户的权限是最低的，只有3，所以无法调用，如果要实现上述要求，
可以把PGFLT对应的权限位设置为3，从而可以让用户调用

3.The break point test case will either generate a break point exception or a general protection 
fault depending on how you initialized the break point entry in the IDT (i.e., your call to 
SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception 
to work as specified above and what incorrect setup would cause it to trigger a general protection fault?
与上面的问题是一个道理，通过绑定权限为最低权限3从而可以让用户调用

4.What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?
权限保护是为了减少用户可以触发的Exception，并使得所有用户可以调用并进入内核态以后的功能都是对于
内核无害的，通过权限保护可以让用户无法触发一些有可能对内核造成危险的Exception，从而进一步保护了内核
的安全，所以可以软中断的都是内核设计者选好的同时不会对内核造成危害的功能